diff --git a/node_modules/@cloudcannon/suite/packages/jekyll-dev/index.js b/node_modules/@cloudcannon/suite/packages/jekyll-dev/index.js
index 7ffd0ff..990cb53 100644
--- a/node_modules/@cloudcannon/suite/packages/jekyll-dev/index.js
+++ b/node_modules/@cloudcannon/suite/packages/jekyll-dev/index.js
@@ -117,10 +117,10 @@ module.exports = function (gulp, config) {
 		};
 
 		var child = childProcess.spawn("bundle", commands, {
-				cwd: config.jekyll.src
-			}).on("close", function () {
-				done(null, output);
-			});
+			cwd: config.jekyll.src
+		}).on("close", function () {
+			done(null, output);
+		});
 
 		child.stdout.on("data", readOutput);
 		child.stderr.on("data", readOutput);
@@ -135,7 +135,7 @@ module.exports = function (gulp, config) {
 				commands.push(arg, JEKYLL_OPTIONS[arg]);
 			}
 		}
-		config.flags.forEach(function(flag) {
+		config.flags.forEach(function (flag) {
 			commands.push(flag);
 		});
 
@@ -150,11 +150,21 @@ module.exports = function (gulp, config) {
 	// Custom Tasks
 
 	var customTasks = [];
-	for (var taskName in config.tasks) {
-		if (config.tasks.hasOwnProperty(taskName)) {
-			gulp.task(nspc + ":" + taskName, config.tasks[taskName].task);
-			customTasks.push(nspc + ":" + taskName);
-		}
+	// console.log("TASKS:", config.tasks)
+	// config.tasks.map((taskName) => {
+	// 	if (config.tasks.hasOwnProperty(taskName)) {
+	// 		gulp.task(nspc + ":" + taskName, config.tasks[taskName].task);
+	// 		customTasks.push(nspc + ":" + taskName);
+	// 	}
+	// })
+	for (var taskName of config.tasks) {
+		// console.log("TASKNAME:", taskName)
+		// console.log("TRUE/FALSE:", config.tasks.hasOwnProperty(taskName))
+		customTasks.push(taskName)
+		// if (config.tasks.hasOwnProperty(taskName)) {
+		// 	gulp.task(nspc + ":" + taskName, config.tasks[taskName].task);
+		// 	customTasks.push(nspc + ":" + taskName);
+		// }
 	}
 
 	// -----
@@ -164,7 +174,7 @@ module.exports = function (gulp, config) {
 		var jekyllWatchFiles = [config.jekyll._src + "/**/*"];
 		for (var taskName in config.tasks) {
 			if (config.tasks.hasOwnProperty(taskName)) {
-				gulp.watch(config.tasks[taskName].watch, {delay: 500}, gulp.series(nspc + ":" + taskName));
+				gulp.watch(config.tasks[taskName].watch, { delay: 500 }, gulp.series(nspc + ":" + taskName));
 
 				config.tasks[taskName].watch.forEach(function (glob) {
 					jekyllWatchFiles.push("!" + glob);
@@ -174,7 +184,7 @@ module.exports = function (gulp, config) {
 
 		function completeWatch() {
 			log(c.grey("ðŸ‘“ watching: " + jekyllWatchFiles.join("\n\t")));
-			gulp.watch(jekyllWatchFiles, {delay: 500}, gulp.series(nspc + ":reload"));
+			gulp.watch(jekyllWatchFiles, { delay: 500 }, gulp.series(nspc + ":reload"));
 			log(c.grey("âœ” done"));
 			done();
 		}
@@ -205,7 +215,7 @@ module.exports = function (gulp, config) {
 			}
 
 			log("Checking for local theme repo...");
-			runBundleCommand(["config", "local." + theme], true, function(err, output) {
+			runBundleCommand(["config", "local." + theme], true, function (err, output) {
 				if (err) {
 					log(c.yellow("! running `bundle config` failed"));
 					return completeWatch();
@@ -238,10 +248,10 @@ module.exports = function (gulp, config) {
 								try {
 									var itemPath = path.join(baseThemeWatch, item);
 									var stat = fs.lstatSync(itemPath);
-									if(stat.isDirectory() && !folderIsIgnored(baseThemeWatch, item, ignores)) {
+									if (stat.isDirectory() && !folderIsIgnored(baseThemeWatch, item, ignores)) {
 										jekyllWatchFiles.push(path.relative(cwd, path.join(itemPath)) + "/**/*");
 									}
-								} catch(err) {
+								} catch (err) {
 									console.error(err);
 								}
 							});
@@ -280,7 +290,7 @@ module.exports = function (gulp, config) {
 	// -------
 	// Default
 	if (customTasks.length > 0) {
-		gulp.task(npsc, gulp.series(customTasks, nspc + ":build", gulp.parallel(nspc + ":watch", nspc + ":serve")));
+		// gulp.task(nspc, gulp.series(customTasks, nspc + ":build", gulp.parallel(nspc + ":watch", nspc + ":serve")));
 	} else {
 		gulp.task(nspc, gulp.series(nspc + ":build", gulp.parallel(nspc + ":watch", nspc + ":serve")));
 	}
